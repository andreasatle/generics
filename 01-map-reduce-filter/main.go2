package main

import (
	"fmt"

	"github.com/andreasatle/generics/01-map-reduce-filter/mrf"
)

func main() {
	// Local functions
	intToFloat32 := func(i int) float32 { return float32(i) }
	intToFloat64 := func(i int) float64 { return float64(i) }

	intSum := func(a, b int) int { return a + b }
	intProduct := func(a, b int) int { return a * b }
	concat := func(a, b string) string { return a + b }

	parity := func(i int) int {
		var r = i % 2
		if r >= 0 {
			return r
		}
		return r + 2
	}
	isOdd := func(i int) bool { return parity(i) == 1 }
	isEven := func(i int) bool { return parity(i) == 0 }

	s := []int{-3, -2, -1, 1, 2, 3, 4, 5}

	fmt.Printf("Array: \n%v, %T\n\n", s, s)

	float32s := mrf.Map(s, intToFloat32)
	float64s := mrf.Map(s, intToFloat64)
	fmt.Printf("Mapped arrays:\n%v, %T\n%v, %T\n\n",
		float32s, float32s, float64s, float64s)

	pari := mrf.Map(s, parity)
	fmt.Println("Mapped Parity: ", pari, "\n")

	sum := mrf.Reduce(s, 0, intSum)
	prod := mrf.Reduce(s, 1, intProduct)
	fmt.Printf("Reduced Sum: %d\nReduced Product: %d\n\n", sum, prod)

	odd := mrf.Filter(s, isOdd)
	even := mrf.Filter(s, isEven)
	fmt.Printf("Filtered Odd: %v\n", odd)
	fmt.Printf("Filtered Even: %v\n\n", even)

	str := []string{"foo", "bar", "bo", "ek"}
	c := mrf.Reduce(str, "", concat)
	fmt.Println("Input strings:", str)
	fmt.Println("Reduced string:", c, "\n")
}
